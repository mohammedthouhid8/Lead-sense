const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const asyncHandler = require("express-async-handler");
const userModel = require("../model/user.model");

// 1. Register USER
const registerUser = asyncHandler(async(req, res) => {
    // destructing of the object using  ES6+ -Ecmascript feature
    const {name, email, phone, password} = req.body;
    // console.log(name,email,password);

    if(!name || !email || !phone || !password){
        res.status(404).json({error: "User Data is Missing"})
        return;
    }

    const userExists = await userModel.findOne({email});
    if(userExists){
        res.status(400).json({error: "User already exist"})
        return;
    }

    // hashing the password and adding User
    const salt = await bcrypt.genSalt(10);
    hashedPassword = await bcrypt.hash(password, salt);
    const user = await userModel.create ({
        name,
        email,
        phone,
        password: hashedPassword,
    });
    if (user) {
        res.status(201).json({
            id: user.id,
            name: user.name,
            email: user.email,
            phone: user.phone,
        });
    } else {
        res.status(400).json({error: "Invalid User Data!"});
        return;
    }
});

// 2. Loging user
const loginUser = asyncHandler(async(req, res) => {
    const {email, password} = req.body;
    const user = await userModel.findOne({email});

    if (user && (await bcrypt.compare(password, user.password))){
        res.status(200).json ({
            name: user.name,
            email: user.email,
            token: generateToken(user.id)
        });
        } else {
            res.status(400).json({error: "Invalid Credentials"});
            
        }
});

// 3. Get loggedIn user - Protect
const getLoggedInUser = asyncHandler(async (req, res) => {
    const {id, name, email} = await userModel.findById(req.user.id);
    res.status(200).json({
        id,
        name,
        email,
    });
    res.json({message: "Retrieved LoggedIn User"})
});

// Generating Token Function
const generateToken = (id) => {
    return jwt.sign({id}, process.env.JWT_SECRET, {
        expiresIn: "1d",
    });
};

/* =============================== USER CRUD ======================== */

// 4. get all users
const getUsers = asyncHandler (async(req, res) => {
    console.log("retrieving user records");
    const {page=1, limit=10} = req.query;
    const options = {
        page: page,
        limit: limit,
        select: "name email phone",
        sort: {name: 1},
        collation: {
            locale: "en"
        },
    };
    // const users = await userModel.find()
    userModel.paginate({}, options, function (err, users){
        if (users) {
            res.status(200).jason(users);
        } else {
            res.status(400).json({error: "unable to get Users", err});
        }
    });
});

// 5. get a user by ID
const getUserById = asyncHandler(async (req, res) => {
    let id = req.params.id;
    const user = await userModel.findById(id);
    if(user) {
        res.status(200).json(user);
    } else {
        res.status(400).json({ error: "Unable to get user"});
    }
});

// 6. Update a user
const updateUser = asyncHandler(async(req, res) => {
    let id = req.params.id;
    userModel.findById(id, function (err, user){
        if(!user)
        res.status(404).send("data is not found");
        else
        user.name = req.body.name;
        user.email = req.body.email;
        user.phone = req.body.phone;

    user
        .save()
        .then((user) => {
            res.json("user updated!");
        })
        .catch((err) => {});
    });
});

// 7. Delete a User
const deleteUser = asyncHandler(async(req, res) => {
    let id = req.params.id;
    userModel.findById(id, function( err, user) {
        if (!user) res.status(404).send("data is not found");
        else
            user
                .delete()
                .then((user) => {
                    res.json("user Deleted!");
                })
                .catch((err) => {})
    });
});

// Exporting the user Controller Functions
module.exports = {
    registerUser, 
    loginUser, 
    getLoggedInUser,
    getUsers,
    getUserById,
    updateUser,
    deleteUser,
};
